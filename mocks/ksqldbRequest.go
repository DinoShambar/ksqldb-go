// Code generated by mockery v2.9.4. DO NOT EDIT.

package ksqldb

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	net "github.com/thmeitz/ksqldb-go/net"
)

// ksqldbRequest is an autogenerated mock type for the ksqldbRequest type
type ksqldbRequest struct {
	mock.Mock
}

// handleGetRequest provides a mock function with given fields: httpClient, url
func (_m *ksqldbRequest) handleGetRequest(httpClient *net.HTTPClient, url string) (*[]byte, error) {
	ret := _m.Called(httpClient, url)

	var r0 *[]byte
	if rf, ok := ret.Get(0).(func(*net.HTTPClient, string) *[]byte); ok {
		r0 = rf(httpClient, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*net.HTTPClient, string) error); ok {
		r1 = rf(httpClient, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// handleRequestError provides a mock function with given fields: code, buf
func (_m *ksqldbRequest) handleRequestError(code int, buf []byte) error {
	ret := _m.Called(code, buf)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(code, buf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newCloseQueryRequest provides a mock function with given fields: api, ctx, payload
func (_m *ksqldbRequest) newCloseQueryRequest(api net.HTTPClient, ctx context.Context, payload io.Reader) (*http.Request, error) {
	ret := _m.Called(api, ctx, payload)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(net.HTTPClient, context.Context, io.Reader) *http.Request); ok {
		r0 = rf(api, ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(net.HTTPClient, context.Context, io.Reader) error); ok {
		r1 = rf(api, ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newKsqlRequest provides a mock function with given fields: api, payload
func (_m *ksqldbRequest) newKsqlRequest(api net.HTTPClient, payload io.Reader) (*http.Request, error) {
	ret := _m.Called(api, payload)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(net.HTTPClient, io.Reader) *http.Request); ok {
		r0 = rf(api, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(net.HTTPClient, io.Reader) error); ok {
		r1 = rf(api, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newPostRequest provides a mock function with given fields: api, ctx, endpoint, payload
func (_m *ksqldbRequest) newPostRequest(api net.HTTPClient, ctx context.Context, endpoint string, payload io.Reader) (*http.Request, error) {
	ret := _m.Called(api, ctx, endpoint, payload)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(net.HTTPClient, context.Context, string, io.Reader) *http.Request); ok {
		r0 = rf(api, ctx, endpoint, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(net.HTTPClient, context.Context, string, io.Reader) error); ok {
		r1 = rf(api, ctx, endpoint, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newQueryRequest provides a mock function with given fields: _a0, _a1
func (_m *ksqldbRequest) newQueryRequest(_a0 http.Client, _a1 io.Reader) (*http.Request, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(http.Client, io.Reader) *http.Request); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(http.Client, io.Reader) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newQueryStreamRequest provides a mock function with given fields: api, ctx, payload
func (_m *ksqldbRequest) newQueryStreamRequest(api net.HTTPClient, ctx context.Context, payload io.Reader) (*http.Request, error) {
	ret := _m.Called(api, ctx, payload)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(net.HTTPClient, context.Context, io.Reader) *http.Request); ok {
		r0 = rf(api, ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(net.HTTPClient, context.Context, io.Reader) error); ok {
		r1 = rf(api, ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
