// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	ksqldb "github.com/thmeitz/ksqldb-go"

	net "github.com/thmeitz/ksqldb-go/net"
)

// KsqldbFactory is an autogenerated mock type for the KsqldbFactory type
type KsqldbFactory struct {
	mock.Mock
}

// NewClient provides a mock function with given fields: _a0
func (_m *KsqldbFactory) NewClient(_a0 net.HTTPClient) (*ksqldb.KsqldbClient, error) {
	ret := _m.Called(_a0)

	var r0 *ksqldb.KsqldbClient
	if rf, ok := ret.Get(0).(func(net.HTTPClient) *ksqldb.KsqldbClient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ksqldb.KsqldbClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(net.HTTPClient) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithOptions provides a mock function with given fields: options
func (_m *KsqldbFactory) NewClientWithOptions(options net.Options) (*ksqldb.KsqldbClient, error) {
	ret := _m.Called(options)

	var r0 *ksqldb.KsqldbClient
	if rf, ok := ret.Get(0).(func(net.Options) *ksqldb.KsqldbClient); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ksqldb.KsqldbClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(net.Options) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
